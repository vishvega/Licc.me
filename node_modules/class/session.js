const ObjectId = require("mongodb").ObjectId;
const crypto = require("crypto");
const image = require("class/image.js");

class Session {
    constructor(token) {
        this.isSet = false;
        if (token !== null && token.length === 64) {
            this.token = token;
        }
    }

    async set() {
        if (!this.isSet && this.token) {
            this.isSet = await this.read();
        }
        return this.isSet;
    }

    async update() {
        return await this.read();
    }

    async read() {
        const db = await require("class/database.js");
        const result = await db.collection("session").aggregate([
            { $match: { _id: this.token } },
            { $limit: 1 },
            { $lookup: { from: "users", localField: "user_id", foreignField: "_id", as: "user" } },
            { $project: { user: { $arrayElemAt: ["$user", 0] } } },
            { $project: { "user.password": 0, "user.date": 0 } }
        ]).next();

        if (result !== null) {
            this.user_id = result.user._id.toString();
            this.username = result.user.username;
            this.tag = result.user.tag;
            this.email = result.user.email;
            this.avatar = image.url(result.user.avatar, "avatars");

            return true;
        }
        return false;
    }

    async create(user_id) {
        const db = await require("class/database.js");
        let id = crypto.randomBytes(32).toString("hex");

        while (await db.collection("session").countDocuments({ _id: id }) === 1) {
            id = crypto.randomBytes(32).toString("hex");
        }

        const result = await db.collection("session").insertOne({ _id: id, user_id: ObjectId(user_id), date: new Date() });

        if (result.insertedCount === 1) {
            this.token = id;
            return true;
        }
        return false;
    }

    async destroy() {
        const db = await require("class/database.js");
        const result = await db.collection("session").deleteOne({ _id: this.token });

        return result.deletedCount === 1;
    }
}

module.exports = Session;