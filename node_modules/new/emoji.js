const ObjectId = require("mongodb").ObjectId;
const fs = require("fs");
const channel = require("class/channel.js");
const image = require("class/image.js");

module.exports = async (session, query, message) => {
    if (await session.set()) {
        const { guild_id } = query;

        if (await channel.isOwner(guild_id, session.user_id)) {
            const { files } = message;

            if (Array.isArray(files)) {
                const emojis = [];
                const db = await require("class/database.js");
                for (const file of files) {
                    const name = file.name.split(".")[0];
                    const filename = await image.save(file.file, "emojis", 128, true);

                    if (filename.full !== null) {
                        const id = filename.split(".")[0];
                        const result = await db.collection("emojis").insertOne({ _id: id, guild_id: ObjectId(guild_id), name: name });

                        if (result.insertedCount === 1) {
                            emojis.push({
                                id: id,
                                name: name
                            });
                        } else {
                            try {
                                fs.unlinkSync(`public/emojis/${filename}`);
                            } catch (error) {
                                
                            }

                            return {
                                status: false,
                                error: "Failed to update"
                            }
                        }
                    } else {
                        return {
                            status: false,
                            error: "Invalid file"
                        }
                    }
                }

                const find = await db.collection("guilds").findOne({ _id: ObjectId(guild_id) }, { projection: { _id: 0, channels: 1 } });

                if (find !== null) {
                    return {
                        status: true,
                        type: "GUILD_EMOJI_CREATE",
                        access: find.channels[0].toString(),
                        guild_id: guild_id,
                        emojis: emojis
                    }
                } else {
                    return {
                        status: true,
                        type: "GUILD_EMOJI_CREATE",
                        guild_id: guild_id,
                        emojis: emojis
                    }
                }
            } else {
                return {
                    status: false,
                    error: "Invalid body"
                }
            }
        } else {
            return {
                status: false,
                error: "Missing permissions"
            }
        }
    } else {
        return {
            status: false
        }
    }
}